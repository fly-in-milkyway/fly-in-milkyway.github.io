{"title":"「NOI 2016」优秀的拆分","slug":"NOI-2016-优秀的拆分","date":"2018-12-28T09:42:56.000Z","updated":"2018-12-28T13:18:51.826Z","comments":true,"path":"api/articles/NOI-2016-优秀的拆分.json","photos":[],"link":"","excerpt":"","covers":["/2018/12/28/NOI-2016-优秀的拆分/01.jpg","/2018/12/28/NOI-2016-优秀的拆分/02.jpg","/2018/12/28/NOI-2016-优秀的拆分/03.jpg"],"content":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><p>如果一个字符串可以被拆分为 AABB 的形式，其中 A 和 B 是任意非空字符串，则我们称该字符串的这种拆分是优秀的。例如，对于字符串 aabaabaa，如果令 A=aab, B=a，我们就找到了这个字符串拆分成 AABB 的一种方式。一个字符串可能没有优秀的拆分，也可能存在不止一种优秀的拆分。现在给出一个长度为 n 的字符串 S，我们需要求出，在它所有子串的所有拆分方式中，优秀拆分的总个数。这里的子串是指字符串中连续的一段。以下事项需要注意：出现在不同位置的相同子串，我们认为是不同的子串，它们的优秀拆分均会被记入答案。在一个拆分中，允许出现 A=B。字符串本身也是它的一个子串。</p>\n<h2 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"Input\"></a>Input</h2><p>每个输入文件包含多组数据。输入文件的第一行只有一个整数 T，表示数据的组数。</p>\n<p>接下来 T 行，每行包含一个仅由英文小写字母构成的字符串 S，意义如题所述。</p>\n<h2 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"Output\"></a>Output</h2><p>输出 T 行，每行包含一个整数，表示字符串 S 所有子串的所有拆分中，总共有多少个是优秀的拆分。</p>\n<h2 id=\"Sample-Input\"><a href=\"#Sample-Input\" class=\"headerlink\" title=\"Sample Input\"></a>Sample Input</h2><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"LSL\"><figure class=\"iseeu highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\">aabbbb</span><br><span class=\"line\">cccccc</span><br><span class=\"line\">aabaabaabaa</span><br><span class=\"line\">bbaabaababaaba</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"Sample-Output\"><a href=\"#Sample-Output\" class=\"headerlink\" title=\"Sample Output\"></a>Sample Output</h2><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"LSL\"><figure class=\"iseeu highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">7</span></span><br></pre></td></tr></table></figure></div>\n<h2 id=\"HINT\"><a href=\"#HINT\" class=\"headerlink\" title=\"HINT\"></a>HINT</h2><p>$1≤T≤10, 1≤|S|≤30000$</p>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><p>$AABB$ 相当于将两个连续的 $double$ 串拼接起来，设 $f[i]$ 表示以 $i$ 结尾的 $double$ 串有多少，$g[i]$ 表示以 $i$ 开始的 $double$ 串有多少，则答案为 $\\sum\\limits_{i=1}^{n}f[i]\\times g[i+1]$。</p>\n<p>接下来，我们利用后缀数组求出 $f$ 和 $g$。</p>\n<p>先正反做两遍后缀数组，枚举 $double$ 串的长度 $2\\times len$，在原串中每隔长度 $len$ 选取一个位置，枚举相邻的两个位置，得出它们左边字符串的 $lcs$（图1中上面两个字符串）和右边字符串的 $lcp$（图1中下面两个字符串），然后对图2中的紫色串到图3中的紫色串之间的所有长度为 $2\\times len$ 的子串统计答案。</p>\n<p><img src=\"/2018/12/28/NOI-2016-优秀的拆分/01.jpg\" alt=\"\"></p>\n<p><img src=\"/2018/12/28/NOI-2016-优秀的拆分/02.jpg\" alt=\"\"></p>\n<p><img src=\"/2018/12/28/NOI-2016-优秀的拆分/03.jpg\" alt=\"\"></p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"C\"><figure class=\"iseeu highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n","categories":[],"tags":[{"name":"后缀数组","slug":"后缀数组","count":3,"path":"api/tags/后缀数组.json"}]}